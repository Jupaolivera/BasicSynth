{"version":3,"sources":["Components/Microphone.js","Synths/Sine.js","Synths/Square.js","Synths/Sawtooth.js","Synths/Triangle.js","Synths/Noise.js","Synths/Microphone.js","Synths/Oscillator.js","Synths/LFOController.js","App.js","Analyzers/Analyzers.js","reportWebVitals.js","index.js"],"names":["Microphone","analyzerOne","analyzerTwo","mic","filter","useState","micStatus","setMicStatus","className","onClick","close","open","then","connect","catch","e","console","log","id","sineVolume","Tone","toDestination","sineTremolo","frequency","depth","spread","sineVibrato","wet","sine","volume","oscillator","type","envelope","attack","decay","sustain","release","squareVolume","squareTremolo","squareVibrato","square","sawToothVolume","sawToothTremolo","sawToothVibrato","sawTooth","triangleVolume","triangleTremolo","triangleVibrato","triangle","noiseVolume","noiseTremolo","noise","Oscillator","synth","synthVolume","dialVolSynth","useRef","playingSynth","freqSynth","status","setStatus","current","now","triggerRelease","triggerAttack","value","stop","start","onChange","linearRampTo","min","max","size","knobRadius","progressWidth","circleWidth","showTooltip","stepSize","LFOController","freqAM","setFreqAM","freqFM","setFreqFM","statusLFO","setStatusLFO","style","display","flexDirection","height","App","ACTX","Waveform","AnalyzerTwo","Analyzer_Two_WA","createAnalyser","waveformAnalyzer","useEffect","analyzer","audiomotionAnalyzer","AudioMotionAnaliyzer","document","getElementById","source","barSpace","bgAlpha","width","fftSize","fillAlpha","gradient","lineWidth","loRes","lumiBars","maxDecibels","maxFreq","minDecibels","minFreq","mirror","mode","radial","reflexAlpha","reflexBright","reflexFit","reflexRatio","overlay","showBgColor","showFPS","showLeds","showPeaks","showScaleX","showScaleY","smoothing","spinSpeed","splitGradient","stereo","useCanvas","connectSpeakers","registerGradient","bgColor","dir","colorStops","pos","color","Analyzer_One","analyser","context","ref","CVS","CTX","getContext","W","window","innerWidth","H","innerHeight","DATA","Uint8Array","frequencyBinCount","LEN","length","h","x","fillStyle","fillRect","AnalyzerLoop","requestAnimationFrame","imgData","getImageData","putImageData","getByteFrequencyData","i","rat","hue","Math","round","lit","beginPath","strokeStyle","moveTo","lineTo","stroke","Analyzer_Two","WaveformCTX","WaveformLoop","waveArray","getValue","clearRect","WaveformRender","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.78f296f2.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./Microphone.css\";\n\nexport function Microphone({ analyzerOne, analyzerTwo, mic, filter }) {\n    const [micStatus, setMicStatus] = useState(false);\n\n    const showStatus = () => {\n        if (micStatus) {\n            return (\n                <div className=\"containerStatus\">\n                    ON\n                    <div id=\"circleOn\"></div>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"containerStatus\">\n                    OFF\n                    <div id=\"circleOff\"></div>\n                </div>\n            );\n        }\n    };\n\n    const micHandler = () => {\n        // MIC INPUT SETUP //\n        if (!micStatus) {\n            setMicStatus(true);\n            mic.open()\n                .then(() => {\n                    filter.connect(analyzerOne);\n                    filter.connect(analyzerTwo);\n                })\n                .catch((e) => {\n                    console.log(\"mic not open\");\n                });\n        } else {\n            setMicStatus(false);\n            mic.close();\n            /*\n            filter.disconnect(analyzerOne);\n            filter.disconnect(analyzerTwo);\n            */\n        }\n    };\n    return (\n        <div className=\"MICRO\">\n            <button onClick={micHandler}> MIC {showStatus()}</button>\n        </div>\n    );\n}\n","import * as Tone from \"tone\";\n\nexport const sineVolume = new Tone.Volume(-30).toDestination();\nexport const sineTremolo = new Tone.Tremolo({\n    frequency: 0,\n    depth: 1,\n    spread: 0,\n}).connect(sineVolume);\n\nexport const sineVibrato = new Tone.Vibrato({\n    frequency: 0,\n    depth: 1,\n    wet: 0,\n}).connect(sineTremolo);\n\nexport const sine = new Tone.MonoSynth({\n    volume: -8,\n    oscillator: {\n        type: \"sine\",\n        frequency: 150,\n    },\n    envelope: {\n        attack: 0.6,\n        decay: 0.0,\n        sustain: 1,\n        release: 0.1,\n    },\n}).connect(sineVibrato);\n","import * as Tone from \"tone\";\n\nexport const squareVolume = new Tone.Volume(-30).toDestination();\nexport const squareTremolo = new Tone.Tremolo({\n    frequency: 0,\n    depth: 1,\n    spread: 0,\n}).connect(squareVolume);\n\nexport const squareVibrato = new Tone.Vibrato({\n    frequency: 0,\n    depth: 1,\n    wet: 0,\n}).connect(squareTremolo);\n\nexport const square = new Tone.MonoSynth({\n    volume: -8,\n    oscillator: {\n        type: \"square\",\n        frequency: 150,\n    },\n    envelope: {\n        attack: 0.6,\n        decay: 0.0,\n        sustain: 1,\n        release: 0.1,\n    },\n}).connect(squareVibrato);\n","import * as Tone from \"tone\";\n\nexport const sawToothVolume = new Tone.Volume(-30).toDestination();\nexport const sawToothTremolo = new Tone.Tremolo({\n    frequency: 0,\n    depth: 1,\n    spread: 0,\n}).connect(sawToothVolume);\n\nexport const sawToothVibrato = new Tone.Vibrato({\n    frequency: 0,\n    depth: 1,\n    wet: 0,\n}).connect(sawToothTremolo);\n\nexport const sawTooth = new Tone.MonoSynth({\n    volume: -8,\n    oscillator: {\n        type: \"sawtooth\",\n        frequency: 150,\n    },\n    envelope: {\n        attack: 0.6,\n        decay: 0.0,\n        sustain: 1,\n        release: 0.1,\n    },\n}).connect(sawToothVibrato);\n","import * as Tone from \"tone\";\n\nexport const triangleVolume = new Tone.Volume(-30).toDestination();\nexport const triangleTremolo = new Tone.Tremolo({\n    frequency: 0,\n    depth: 0,\n    spread: 0,\n}).connect(triangleVolume);\n\nexport const triangleVibrato = new Tone.Vibrato({\n    frequency: 0,\n    depth: 0,\n    wet: 0,\n}).connect(triangleTremolo);\n\nexport const triangle = new Tone.MonoSynth({\n    volume: -8,\n    oscillator: {\n        type: \"triangle\",\n        frequency: 150,\n    },\n    envelope: {\n        attack: 0.6,\n        decay: 0.0,\n        sustain: 1,\n        release: 0.1,\n    },\n}).connect(triangleVibrato);\n","import * as Tone from \"tone\";\n\nexport const noiseVolume = new Tone.Volume(-30).toDestination();\n\nexport const noiseTremolo = new Tone.Tremolo({\n    frequency: 0,\n    depth: 0,\n    spread: 0,\n}).connect(noiseVolume);\n\nexport const noise = new Tone.Noise(\"pink\").connect(noiseTremolo);\n","import * as Tone from \"tone\";\n\nexport const filter = new Tone.Filter(300, \"highpass\", -24);\nexport const mic = new Tone.UserMedia(-10).connect(filter);\n","import { useRef, Fragment, useState } from \"react\";\nimport { CircleSlider } from \"react-circle-slider\";\nimport * as Tone from \"tone\";\nimport \"./Oscillator.css\";\n\nexport function Oscillator({ type, synth, synthVolume }) {\n    const dialVolSynth = useRef(-30);\n    const playingSynth = useRef(false);\n    const freqSynth = useRef(150);\n    const [status, setStatus] = useState(false);\n\n    const showStatus = () => {\n        if (status) {\n            return (\n                <div className=\"containerStatus\">\n                    ON\n                    <div id=\"circleOn\"></div>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"containerStatus\">\n                    OFF\n                    <div id=\"circleOff\"></div>\n                </div>\n            );\n        }\n    };\n\n    const handleChange = (e) => {\n        dialVolSynth.current = e;\n        synthVolume.volume.linearRampTo(e, 0.1, Tone.now());\n    };\n\n    const handleChangeFreq = (e) => {\n        freqSynth.current = e;\n        synth.frequency.value = e;\n    };\n\n    const handlePlay = () => {\n        if (type !== \"NOISE\") {\n            if (!playingSynth.current) {\n                synth.triggerAttack(synth.frequency.value);\n                playingSynth.current = true;\n                setStatus(true);\n            } else {\n                const now = Tone.now();\n                synth.triggerRelease(now);\n                playingSynth.current = false;\n                setStatus(false);\n            }\n        } else {\n            if (!playingSynth.current) {\n                synth.start();\n                playingSynth.current = true;\n                setStatus(true);\n            } else {\n                synth.stop();\n                playingSynth.current = false;\n                setStatus(false);\n            }\n        }\n    };\n\n    return (\n        <Fragment>\n            <div className={type}>\n                <button onClick={handlePlay}>\n                    {type}\n                    {showStatus()}\n                </button>\n            </div>\n            <div className={`${type}_VOL`}>\n                <CircleSlider\n                    value={dialVolSynth.current}\n                    onChange={handleChange}\n                    min={-30}\n                    max={-5}\n                    size={90}\n                    knobRadius={7}\n                    progressWidth={10}\n                    circleWidth={9}\n                />\n            </div>\n            <div className={`${type}_VOLW`}>{`${type} VOLUME`}</div>\n\n            {type === \"NOISE\" || (\n                <Fragment>\n                    <div className={`${type}_FREQ`}>\n                        <CircleSlider\n                            onChange={handleChangeFreq}\n                            min={50}\n                            max={4000}\n                            value={freqSynth.current}\n                            showTooltip={true}\n                            stepSize={10}\n                            size={90}\n                            knobRadius={7}\n                            progressWidth={10}\n                            circleWidth={9}\n                        />\n                    </div>\n                    <div className={`${type}_FREQW`}>{`${type} FREQUENCY`}</div>\n                </Fragment>\n            )}\n        </Fragment>\n    );\n}\n","import { useRef, Fragment, useState } from \"react\";\nimport { CircleSlider } from \"react-circle-slider\";\nimport * as Tone from \"tone\";\nimport \"./LFOController.css\";\n\nexport function LFOController({ type, sineVibrato, sineTremolo }) {\n    const status = useRef(false);\n    const [freqAM, setFreqAM] = useState(0);\n    const [freqFM, setFreqFM] = useState(0);\n    const [statusLFO, setStatusLFO] = useState(false);\n\n    const showStatus = () => {\n        if (statusLFO) {\n            return (\n                <div className=\"containerStatus\">\n                    ON\n                    <div id=\"circleOn\"></div>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"containerStatus\">\n                    OFF\n                    <div id=\"circleOff\"></div>\n                </div>\n            );\n        }\n    };\n\n    const changeAM = (e) => {\n        sineTremolo.frequency.value = e;\n        setFreqAM(e);\n    };\n\n    const changeFM = (e) => {\n        sineVibrato.frequency.value = e;\n        setFreqFM(e);\n    };\n\n    const handleOnOff = () => {\n        if (type !== \"NOISE\") {\n            if (status.current === false) {\n                sineTremolo.start();\n                sineTremolo.wet.linearRampTo(1, 0.1, Tone.now());\n                sineVibrato.wet.linearRampTo(1, 0.1, Tone.now());\n                sineTremolo.depth.linearRampTo(1, 0.1, Tone.now());\n                sineVibrato.depth.linearRampTo(1, 0.1, Tone.now());\n                status.current = true;\n                setStatusLFO(true);\n            } else {\n                sineTremolo.wet.linearRampTo(0, 0.1, Tone.now());\n                sineVibrato.wet.linearRampTo(0, 0.1, Tone.now());\n                sineTremolo.depth.linearRampTo(0, 0.1, Tone.now());\n                sineVibrato.depth.linearRampTo(0, 0.1, Tone.now());\n                sineTremolo.stop();\n                status.current = false;\n                setStatusLFO(false);\n            }\n        } else {\n            if (status.current === false) {\n                sineTremolo.start();\n                sineTremolo.wet.linearRampTo(1, 0.1, Tone.now());\n                sineTremolo.depth.linearRampTo(1, 0.1, Tone.now());\n                status.current = true;\n                setStatusLFO(true);\n            } else {\n                sineTremolo.wet.linearRampTo(0, 0.1, Tone.now());\n                sineTremolo.depth.linearRampTo(0, 0.1, Tone.now());\n                sineTremolo.stop();\n                status.current = false;\n                setStatusLFO(false);\n            }\n        }\n    };\n\n    const handleReset = () => {\n        if (type !== \"NOISE\") {\n            setFreqAM(0);\n            setFreqFM(0);\n            sineTremolo.wet.linearRampTo(0, 0.1, Tone.now());\n            sineVibrato.wet.linearRampTo(0, 0.1, Tone.now());\n            sineTremolo.depth.linearRampTo(0, 0.1, Tone.now());\n            sineVibrato.depth.linearRampTo(0, 0.1, Tone.now());\n            sineTremolo.frequency.linearRampTo(0, 0.1, Tone.now());\n            sineVibrato.frequency.linearRampTo(0, 0.1, Tone.now());\n            sineTremolo.stop();\n            status.current = false;\n            setStatusLFO(false);\n        } else {\n            setFreqAM(0);\n            setFreqFM(0);\n            sineTremolo.wet.linearRampTo(0, 0.1, Tone.now());\n            sineTremolo.depth.linearRampTo(0, 0.1, Tone.now());\n            sineTremolo.frequency.linearRampTo(0, 0.1, Tone.now());\n            sineTremolo.stop();\n            status.current = false;\n            setStatusLFO(false);\n        }\n    };\n    return (\n        <Fragment>\n            <div\n                className={`${type}_LFO`}\n                style={{ display: \"flex\", flexDirection: \"column\" }}\n            >\n                <button onClick={handleOnOff}>\n                    {type} LFO {showStatus()}\n                </button>\n                <button\n                    className=\"reset\"\n                    onClick={handleReset}\n                    style={{ height: \"45px\" }}\n                >\n                    RESET\n                </button>\n            </div>\n            <div className={`${type}_LFO_FREQ`}>\n                <CircleSlider\n                    size={90}\n                    knobRadius={7}\n                    progressWidth={10}\n                    circleWidth={9}\n                    onChange={changeAM}\n                    value={freqAM}\n                    min={0}\n                    max={100}\n                    showTooltip={true}\n                />\n            </div>\n            <div className={`${type}_AMW`}>{type} AMP LFO</div>\n            {type === \"NOISE\" || (\n                <div className={`${type}_LFOF_FREQW`}>{type} FREQ LFO</div>\n            )}\n            {type === \"NOISE\" || (\n                <div className={`${type}_LFOF_FREQ`}>\n                    <CircleSlider\n                        size={90}\n                        knobRadius={7}\n                        progressWidth={10}\n                        circleWidth={9}\n                        onChange={changeFM}\n                        min={0}\n                        max={100}\n                        value={freqFM}\n                        showTooltip={true}\n                    />\n                </div>\n            )}\n        </Fragment>\n    );\n}\n","import \"./App.css\";\nimport { Microphone } from \"./Components/Microphone\";\nimport React from \"react\";\nimport * as Tone from \"tone\";\nimport { useRef, useEffect } from \"react\";\nimport {\n    Analyzer_One,\n    Analyzer_Two,\n    WaveformRender,\n} from \"./Analyzers/Analyzers\";\n\nimport { sineVolume, sineTremolo, sineVibrato, sine } from \"./Synths/Sine\";\nimport {\n    squareVolume,\n    squareTremolo,\n    squareVibrato,\n    square,\n} from \"./Synths/Square\";\nimport {\n    sawToothVolume,\n    sawToothTremolo,\n    sawToothVibrato,\n    sawTooth,\n} from \"./Synths/Sawtooth\";\n\nimport {\n    triangleVolume,\n    triangleTremolo,\n    triangleVibrato,\n    triangle,\n} from \"./Synths/Triangle\";\n\nimport { noiseVolume, noiseTremolo, noise } from \"./Synths/Noise\";\nimport { mic, filter } from \"./Synths/Microphone\";\nimport { Oscillator } from \"./Synths/Oscillator\";\nimport { LFOController } from \"./Synths/LFOController\";\n\nfunction App() {\n    const ACTX = Tone.context; //setting up Tone.js + Web Audio API\n    const Waveform = useRef(null);\n    const AnalyzerTwo = useRef(null);\n    const Analyzer_Two_WA = ACTX.createAnalyser();\n    const waveformAnalyzer = new Tone.Analyser(\"waveform\", 2048);\n\n    useEffect(() => {\n        Analyzer_One(\"SPECTRO_ONE\", waveformAnalyzer);\n        Analyzer_Two(Analyzer_Two_WA, Tone.Destination, AnalyzerTwo);\n        WaveformRender(waveformAnalyzer, Tone.Destination, Waveform);\n    });\n\n    return (\n        <div className=\"container\">\n            <div className=\"OSCIS\">\n                <Oscillator\n                    type={\"SINE\"}\n                    synthVolume={sineVolume}\n                    synth={sine}\n                />\n                <Oscillator\n                    type={\"SQR\"}\n                    synthVolume={squareVolume}\n                    synth={square}\n                />\n                <Oscillator\n                    type={\"SAW\"}\n                    synthVolume={sawToothVolume}\n                    synth={sawTooth}\n                />\n                <Oscillator\n                    type={\"TRI\"}\n                    synthVolume={triangleVolume}\n                    synth={triangle}\n                />\n                <Oscillator\n                    type={\"NOISE\"}\n                    synthVolume={noiseVolume}\n                    synth={noise}\n                />\n                <Microphone\n                    analyzerOne={waveformAnalyzer}\n                    analyzerTwo={Analyzer_Two_WA}\n                    mic={mic}\n                    filter={filter}\n                />\n            </div>\n            <div className=\"LFO\">\n                <LFOController\n                    type={\"SINE\"}\n                    sineTremolo={sineTremolo}\n                    sineVibrato={sineVibrato}\n                />\n                <LFOController\n                    type={\"SQR\"}\n                    sineTremolo={squareTremolo}\n                    sineVibrato={squareVibrato}\n                />\n                <LFOController\n                    type={\"SAW\"}\n                    sineTremolo={sawToothTremolo}\n                    sineVibrato={sawToothVibrato}\n                />\n                <LFOController\n                    type={\"TRI\"}\n                    sineTremolo={triangleTremolo}\n                    sineVibrato={triangleVibrato}\n                />\n                <LFOController type={\"NOISE\"} sineTremolo={noiseTremolo} />\n            </div>\n            <div className=\"SPECTRO_ONE\" id=\"SPECTRO_ONE\"></div>\n            <div className=\"SPECTRO_TWO\">\n                <canvas\n                    ref={AnalyzerTwo}\n                    style={{ width: \"100%\", height: \"90%\" }}\n                />\n            </div>\n            <div className=\"WAVEFORM\">\n                <canvas\n                    ref={Waveform}\n                    style={{\n                        width: \"100%\",\n                        height: \"100%\",\n                    }}\n                    width={window.innerWidth}\n                    height={window.innerHeight * 2}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import AudioMotionAnaliyzer from \"audiomotion-analyzer\";\n\nexport const Analyzer_One = (id, analyzer) => {\n    const options = {\n        bgColor: \"hsl(280, 100%, 10%)\", // background color (optional) - defaults to '#111'\n        dir: \"h\", // add this property to create a horizontal gradient (optional)\n        colorStops: [\n            // list your gradient colors in this array (at least 2 entries are required)\n            \"orange\", // colors may be defined in any valid CSS format\n            { pos: 1, color: \"white\" }, // use an object to adjust the position (0 to 1) of a color\n            \"hsl(280, 100%, 10%)\", // colors may be defined in any valid CSS format\n        ],\n    };\n    let audiomotionAnalyzer = new AudioMotionAnaliyzer(\n        document.getElementById(id),\n        {\n            source: analyzer,\n            barSpace: 0,\n            bgAlpha: 0.9,\n            height: 4000,\n            width: 5000,\n            fftSize: 2048,\n            fillAlpha: 0.3,\n            gradient: \"rainbow\",\n            lineWidth: 1,\n            loRes: false,\n            lumiBars: false,\n            maxDecibels: -20,\n            maxFreq: 22000,\n            minDecibels: -80,\n            minFreq: 20,\n            mirror: 0,\n            mode: 10,\n            radial: false,\n            reflexAlpha: 0.15,\n            reflexBright: 1,\n            reflexFit: true,\n            reflexRatio: 0,\n            overlay: true,\n            showBgColor: true,\n            showFPS: false,\n            showLeds: false,\n            showPeaks: false,\n            showScaleX: true,\n            showScaleY: false,\n            smoothing: 0.5,\n            spinSpeed: 0,\n            splitGradient: false,\n            start: true,\n            stereo: false,\n            useCanvas: true,\n            volume: 1,\n            connectSpeakers: false,\n        }\n    );\n    audiomotionAnalyzer.registerGradient(\"custom-gradient\", options);\n    audiomotionAnalyzer.gradient = \"custom-gradient\";\n};\n\nexport const Analyzer_Two = (analyser, context, ref) => {\n    const CVS = ref.current;\n    const CTX = CVS.getContext(\"2d\");\n    const W = (CVS.width = window.innerWidth / 2);\n    const H = (CVS.height = window.innerHeight);\n    context.connect(analyser);\n    analyser.fftSize = 4096;\n    const DATA = new Uint8Array(analyser.frequencyBinCount);\n    const LEN = DATA.length;\n    const h = H / LEN;\n    const x = W - 1;\n    CTX.fillStyle = \"hsl(280, 100%, 10%)\";\n    CTX.fillRect(0, 0, W, H);\n    AnalyzerLoop();\n    function AnalyzerLoop() {\n        window.requestAnimationFrame(AnalyzerLoop);\n        let imgData = CTX.getImageData(1, 0, W - 1, H);\n        CTX.fillRect(0, 0, W, H);\n        CTX.putImageData(imgData, 0, 0);\n        analyser.getByteFrequencyData(DATA);\n        for (let i = 0; i < LEN; i++) {\n            let rat = DATA[i] / 150; // intensidad color\n            let hue = Math.round(rat * 120 + (280 % 360));\n            let sat = \"100%\";\n            let lit = 10 + 70 * rat + \"%\";\n            CTX.beginPath();\n            CTX.strokeStyle = `hsl(${hue}, ${sat}, ${lit})`;\n            CTX.moveTo(x, H - i * h * 2.5);\n            CTX.lineTo(x, H - (i * h + h) * 2.5);\n            CTX.stroke();\n        }\n    }\n};\n\nexport const WaveformRender = (analyzer, context, ref) => {\n    let WaveformCTX;\n    WaveformCTX = ref.current.getContext(\"2d\");\n    context.connect(analyzer);\n    WaveformLoop();\n    function WaveformLoop() {\n        let waveArray = analyzer.getValue();\n        requestAnimationFrame(WaveformLoop);\n        WaveformCTX.fillStyle = \"#000000\";\n        WaveformCTX.lineWidth = 16;\n        WaveformCTX.clearRect(\n            0,\n            0,\n            window.innerWidth * 2,\n            window.innerHeight * 2\n        );\n        WaveformCTX.beginPath();\n        for (var i = 1; i < waveArray.length; i += 1) {\n            let x = (i / waveArray.length) * (window.innerWidth * 2);\n            if (i === 0) {\n                WaveformCTX.moveTo(0, window.innerHeight + waveArray[i]);\n            } else {\n                WaveformCTX.lineTo(x, window.innerHeight + waveArray[i] * 1000);\n            }\n        }\n\n        //WaveformCTX.strokeStyle = \"white\"; change color\n        WaveformCTX.stroke();\n    }\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}